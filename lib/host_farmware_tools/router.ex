defmodule HostFarmwareTools.Router do
  use Plug.Router

  defmodule FWManifest do
    @derive {Jason.Encoder, [except: [:directory]]}
    defstruct [
      language: "Custom",
      author: "Connor Rigby",
      description: "autogenerated by HostFarmwareTools",
      version: "0.0.1",
      min_os_version_major: 3,
      directory: nil,
      package: nil,
      url: nil,
      zip: nil,
      executable: nil,
      args: nil,
      config: [],
    ]
  end

  plug Plug.Logger
  plug :match
  plug :dispatch
  use Plug.Debugger, otp_app: :host_farmware_tools

  get "/farmware_installer" do
    conn = fetch_query_params(conn)
    fw = get_fw(conn)

    conn
    |> put_resp_header("Content-Type", "application/json")
    |> send_resp(201, Jason.encode!(fw, pretty: true))
  end

  get "/farmware_zip" do
    conn = fetch_query_params(conn)
    fw = get_fw(conn)
    case fw.directory && File.ls(fw.directory) do
      nil -> send_resp(conn, 401, "Missing paramater: directory")
      {:ok, files} ->
        json = Jason.encode!(fw, pretty: true)
        File.write!(Path.join(fw.directory, "manifest.json"), json)

        files = Enum.map(files, fn(filename) ->
          actual_file = Path.join(fw.directory, filename)
          data = File.read!(actual_file)
          {to_charlist(filename), data}
        end)
        {:ok, {name, zip}} = :zip.create(to_charlist(fw.package) ++ '.zip', files, [:memory])

        conn
        |> put_resp_content_type("application/zip")
        |> put_resp_header("Content-Disposition", "inline; filename=\"#{name}\"")
        |> send_resp(201, zip)
      {:error, _} -> send_resp(conn, 404, "directory not found")
    end
  end

  match _ do
    send_resp(conn, 404, "oops")
  end

  defp get_fw(conn) do
    conn.query_params
    |> Map.take(~w(package url zip executable args directory))
    |> Map.new(fn({key, val}) -> {String.to_atom(key), val} end)
    |> fn(data) ->
      struct(FWManifest, data)
    end.()
    |> Map.put(:url, "#{conn.scheme}://#{get_req_header(conn, "host")}#{conn.request_path}?#{conn.query_string}")
    |> Map.put(:zip, "#{conn.scheme}://#{get_req_header(conn, "host")}/farmware_zip?#{conn.query_string}")
  end
end
